<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NeutralAngler</title>
    <link>https://neutralangler.github.io/</link>
    <description>Recent content on NeutralAngler</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Apr 2020 21:48:17 +0800</lastBuildDate>
    
	<atom:link href="https://neutralangler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第三章 字符串、向量和数组</title>
      <link>https://neutralangler.github.io/c&#43;&#43;/primer_3/</link>
      <pubDate>Sat, 11 Apr 2020 21:48:17 +0800</pubDate>
      
      <guid>https://neutralangler.github.io/c&#43;&#43;/primer_3/</guid>
      <description>3.0 前言  内置类型是直接由C++直接定义的，而标准库定义了另外一组更高级性质的类型，它们尚未被实现到计算机硬件中。 string 和 vector ：string 表示可变长的字符串，vector 存放的是某种类型对象的可变长序列。   3.1 命名空间的 using 声明  除了使用 namespace::成员 的形式以外，还可以通过 using 指令来指定命名空间甚至是命名空间中的具体成员 。格式分别如下：  using namespace::name; //这是指定命名空间内的具体成员 using namespace; //这是只指定命名空间 使用 using 声明后，就无需使用前缀 namespace:: 即可使用。 头文件不应该包含 using 声明 。由于包含多个头文件，如果使用 using 声明可能会导致相同标识符的冲突。   3.2 标准库类型 string  标准库类型 string 表示可变长的字符串，使用 string 类型必须使用 头文件 string 。 作为标准库的一部分，string 类型定义在命名空间 std 中。  3.2.1 定义和初始化 string 对象  如何初始化类的对象是由类本身决定的。一个类可以定义多个初始化对象的方式，只是这些方式之间要有区别。 几种初始化 string 对象的方式：  string s1; //默认初始化，s1 是个空字符串 string s2{ &amp;quot;ss&amp;quot; }; //s2 是字面值 &amp;quot;ss&amp;quot; 除了最后的空字以外的副本 string s3(s1); //s3 是 s1 的副本 string s4 = s1; //s4 是 s1 的副本 string s5(&amp;quot;ss&amp;quot;); //s5 是字面值 &amp;quot;ss&amp;quot; 除了最后的空字以外的副本 string s6 = &amp;quot;ss&amp;quot;; //s6 是字面值 &amp;quot;ss&amp;quot; 除了最后的空字以外的副本 string s7 = (&amp;quot;ss&amp;quot;); //s7 是字面值 &amp;quot;ss&amp;quot; 除了最后的空字以外的副本 string s8 = { &amp;quot;ss&amp;quot; }; //s8 是字面值 &amp;quot;ss&amp;quot; 除了最后的空字以外的副本 string s9 (n, &#39;c&#39;); //使用 n 个连续的 &#39;c&#39; 字符组成的字符串初始化 s9 使用等号（=）初始化一个对象，实际上执行的是 拷贝初始化（copy initialization） ，直接将等号右侧对象的值拷贝到左侧对象中。不使用等号（=），则执行 直接初始化（direct initialization） 。 当初始值只有一个时，通常使用拷贝初始化。 当初始值像上面代码中的 (n,&amp;lsquo;c&amp;rsquo;) 一样，具有多个值，一般只能使用直接初始化。 但也可以使用拷贝初始化，只是要显式地创建一个对象用于拷贝。 比如：  string a = string(10, &#39;s&#39;); 其本质等价于：</description>
    </item>
    
    <item>
      <title>第二章 变量和基本类型</title>
      <link>https://neutralangler.github.io/c&#43;&#43;/primer_2/</link>
      <pubDate>Sat, 11 Apr 2020 19:32:40 +0800</pubDate>
      
      <guid>https://neutralangler.github.io/c&#43;&#43;/primer_2/</guid>
      <description>2.1 基本内置类型  C++定义了一套包括 算术类型（arithmetic type） 和 空类型（void） 在内的基本数据类型。 其中算术类型包括了字符、整型数、布尔值和浮点数。 空类型： 不对应任何具体的值，不能定义 void 类型变量。  2.1.1 算术类型  算术类型分为两类：整型（包括字符和布尔类型在内）和浮点型。 C++中 算术类型的长度（也就是所占字节）在不同系统是有所差别的 ，所表示的数据范围也不同。 基本字符类型是char， 一个char的内存应确保可以存放机器基本字符集中任意字符对应的值 ，所以它的大小一般是一个字节，也就是8位。 其它字符类型（如char16_t、wchar_t、char32_t）则用于扩展字符集 。其中wchar_t类型确保可以存放机器最大扩展字符集中任意一个字符。而char16_t和char32_t则为了Unicode字符集服务。 C++规定了一个int至少和一个short一样大，一个long至少和一个int一样大，一个long long至少和一个long一样大。其中long long是在C++11中新定义的。 可寻址的最小内存块称为 “字节”（byte） ，大多数机器的字节为8 位（bit） ； 计算机中进行数据存储和数据处理的运算的基本单元 被称为 “字”（word） ，它的长度（即字长）通常是几个字节，现代计算机多为16位、32位、64位。 大多数计算机将内存中的每一个字节与一个数字关联起来，这个数字就是 地址(address) 。 程序员可使用 某个地址 来表示 从这个地址开始的一定大小的内存块 。但是如果要知道该地址的具体含义，则要知道储存在该地址的数据的类型，因为 类型决定了数据所占的内存块大小和如何解释该内存块中的内容。 浮点型可以表示单精度，双精度和拓展精度值。 C++标准指定了一个浮点数有效位数的最小值，然而大多数编译器都实现了更高的精度。通常float是4个字节、double是8个字节。 一般来说，类型float和double分别有7和16个有效位。 除了布尔型和拓展的正字符型外，其它整型还可以分为有符号和无符号两种。 其中 int 、 short 、 long 、 long long 都是带符号的。只需在前面添加 unsigned 即可得到无符号类型。 unsigned int 的简写是 unsigned 。 与其它整型不同，字符类型分为三种 ：char、signed char和unsigned char。 其中char与signed char是不一样的。 尽管字符型有三种，但表达型只有两种：有符号和无符号。而char实际上表示为这两种之一，具体是哪种由编译器决定。 执行浮点运算时使用double ， 这是因为double精度比float更大，同时与float的计算速度相差不多，甚至在某些计算机上运算速度还要快于float。  2.</description>
    </item>
    
    <item>
      <title>第一章 又是开始</title>
      <link>https://neutralangler.github.io/c&#43;&#43;/primer_1/</link>
      <pubDate>Thu, 02 Apr 2020 14:40:34 +0800</pubDate>
      
      <guid>https://neutralangler.github.io/c&#43;&#43;/primer_1/</guid>
      <description>1.1 编写一个简单程序  每个C++都包含一个或多个函数（function）,其中一个必须命名为 main 。 操作系统通过调用 main 函数来运行C++程序。 一般函数 的定义包含：返回类型（return type）、函数名（function name）、()里的参数列表（parameter list）以及函数体（function body） 函数体：由 { } 与其中的语句块（block of statements）组成 内置类型： 指编程语言自身定义的类型 在C++中，大多数语句以分号（;）表示结束。而且在C++语句中的制表格、空格和回车是一样的，所以大多数语句可以不在同一行。 在大多数系统中，main 的返回值被用来指示状态。返回值0表明成功，非0值的含义由系统定义，通常被用来指出错误类型。 类型： 一种类型不仅定义了数据元素的内容，还定义了该类数据上可以执行的操作。  1.1.1编译、运行程序  集成开发环境（Integrated Development Environment , IDE）：将代码编辑器、编译器、调试器和图形用户界面等工具包装在一起。 源文件（source file）：存储程序源码的文件 对于源文件，不同的编译器 采用 不同的后缀命名约定，比如 .cc、.cxx、.cpp、.cp以及.C等。用于告诉系统这是一个C++的源文件。 Windows与UNIX下的命令行编译：     系统 编译器 可执行文件后缀 命令行编译指令 命令行运行指令 获取返回值     Windows 微软VS .exe cl /EHsc prog1.cpp prog1 echo %ERRORLEVEL%   UNIX GUN .</description>
    </item>
    
  </channel>
</rss>